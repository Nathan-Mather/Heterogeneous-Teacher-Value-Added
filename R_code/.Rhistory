t_ability <- 1
postests <- pretests + (1/(1+exp(1)^(-1*pretests)))*2  + (t_ability/2)
plot(pretests, postests-pretests)
plot(pretests, postests)
# add student ability after teacher's effect, But do it nonlinearly
# my_dt[, s_ability2 := s_ability1 + (1/(1+exp(1)^(-1*s_ability1)))*(t_ability/.5)]
my_dt[, s_ability2 := s_ability1 + (1/(1+exp(1)^(-1*s_ability1)))*2  + t_ability/2]
plot(my_dt$s_ability1, my_dt$s_ability2)
# now add in some noise so the residuals are not all zero
my_dt[, s_test2 := s_ability2 + runif(nrow(my_dt),0, .6)]
# Now run the value added regression so we can check the residuals
reg_res <- lm(s_test2 ~  s_ability1 + teacher_id - 1, data = my_dt)
# now check the residuals
my_dt[, resids := reg_res$residuals]
# now plot residuals over ability
plot(my_dt$s_ability1, my_dt$resids)
binnedplot(my_dt$s_ability1 ,my_dt$resids)
# Now try it with teacher center
my_dt[, teacher_comp_adv := as.numeric(t_center >-.5)]
k <- 3
# increasign in pretest
my_dt[teacher_comp_adv == 1, s_ability2 := s_ability1 + (1/(1+exp(1)^(-k*s_ability1)))*2  + t_ability/2]
# decreasing in pretest
my_dt[teacher_comp_adv == 0, s_ability2 := s_ability1 + (1/(1+exp(1)^(k*s_ability1)))*2  + t_ability/2]
# sanity checks
# now add in some noise so the residuals are not all zero
my_dt[, s_test2 := s_ability2 + runif(nrow(my_dt),0, .6)]
# Now run the value added regression so we can check the residuals
reg_res <- lm(s_test2 ~  s_ability1 + teacher_id - 1, data = my_dt)
# now check the residuals
my_dt[, resids := reg_res$residuals]
# now plot residuals over ability
plot(my_dt$s_ability1, my_dt$resids)
binnedplot(my_dt$s_ability1 ,my_dt$resids)
plot(pretests, postests)
rm(list = ls(pos = ".GlobalEnv"), pos = ".GlobalEnv")
options(scipen = 999)
cat("\f")
library(data.table)
# generic utility
util_f <- function(x, y, alpha){
beta <- (1-alpha)
x^alpha * y ^beta
}
# generic marshalian demand
x_m <- function(m, px, alpha){
alpha*(m/px)
}
y_m <- function(m, py, alpha){
beta <- (1-alpha)
beta*(m/py)
}
p_x_m <- function( x, m, alpha){
alpha * (m/x)
}
p_y_m <- function( y,m, alpha){
beta <- (1-alpha)
beta*(m/y)
}
# inderect utility
ind_util_f <- function(m, px, py, alpha){
beta <- (1-alpha)
x_m( m, px, alpha)^alpha * y_m(m, py, alpha)^beta
}
# hicksian demands
x_h <- function(u, py, px, alpha){
beta <- (1-alpha)
u*((alpha/beta)*(py/px))^beta
}
y_h <- function(u, py, px, alpha){
beta <- (1-alpha)
u*((beta/alpha)*(px/py))^alpha
}
# expenditure function
exp_f <- function(u, px, py, alpha){
beta <- (1-alpha)
u*(  px^alpha*((alpha/beta)*py)^beta + py^beta*((beta/alpha)*px)^alpha)
}
#marginal utiltiy of income
mu_income_f <- function(m, px, py, alpha){
beta <- (1-alpha)
first  <- (alpha*(m/px))^alpha * beta * (beta*(m/py))^(beta -1 ) * (beta/py)
second <- (beta*(m/py))^beta * alpha *  (alpha*(m/px))^(alpha-1) * (alpha/px)
first + second
}
# set up two cosumers
#Consumer a
alpha_a <- (3/4)
ma <- 10
# consumer b
alpha_b <- (1/4)
mb <- 10
# price changes
px1 <- 1
py1 <- 1
px2 <- 2
py2 <- 1
# what happens to each consumers utiltiy?
# consumer a change
util_ch_a <- ind_util_f(ma,px1,py1, alpha_a) - ind_util_f(ma,px2,py2, alpha_a)
util_ch_a
util_ch_b <- ind_util_f(mb,px1,py1, alpha_b) - ind_util_f(ma,px2,py2, alpha_b)
util_ch_b
# what happens to their CV ?
cv_a <- exp_f(u = ind_util_f(ma,px1,py1, alpha_a), px2, py2, alpha_a) - ma
cv_a
cv_b <-   exp_f(u = ind_util_f(mb,px1,py1, alpha_b), px2, py2, alpha_b) - mb
cv_b
# try to recover utiltiy change
mu_income_f(ma, px2, py2, alpha_a)* cv_a
util_ch_a
mu_income_f(mb, px2, py2, alpha_b)* cv_b
util_ch_b
#========================================#
# ==== Examples of EV and CV failure ====
#========================================#
# consumer b
alpha_a <- (3/4)
# consumer b
alpha_b <- (1/4)
# lets get four utility levels by changing the price of one good only. Note, this makes
# the other good like a numeraire good. then I can get a sense of the properties here
test_points <- data.table(expand.grid(id = c("a", "b"),
m = c(10,20,30),
px = 1,
py1= c(.25,.5, .99,1,2,4),
py2 = c(.25,.5, .99,1,2,4)))
# get rid of zero change price pairs
test_points <- test_points[py1 != py2]
# add alhpas
test_points[id == "a", alpha := alpha_a ]
test_points[id == "b", alpha := alpha_b ]
# set column order
setcolorder(test_points, c("id", "alpha", "m"))
# fill out their demand
test_points[, x := x_m(m, px, alpha)]
test_points[, y1 := y_m(m, py1, alpha)]
test_points[, y2 := y_m(m, py2, alpha)]
#get thier indirect utility at each st of prices
test_points[, u1 := ind_util_f(m,px,py1, alpha)]
test_points[, u2 := ind_util_f(m,px,py2, alpha)]
# Now lets get thier compensated variation at each change
test_points[, cv := exp_f(u = u1, px, py2, alpha) - m]
# lets also get equivalent variation
test_points[, ev := m - exp_f(u = u2, px, py1, alpha)]
# what is their marginal utility of income portion of the CV?
test_points[, mui_2 := mu_income_f(m, px, py2, alpha)]
# check that I can get CV in the same way
all(test_points[, cv - (u1-u2)/mui_2< .000001])
# So now we will try to get a transformed utility function that has the cardinality
# of CV, but preserves the ordinality of Utility (call it transformed utility tu)
test_points[, tu1 := u1/mui_2]
test_points[, tu2 := u2/mui_2]
# that ^^^ does not work
test_points[, `:=` (tu1 = NULL,  tu2 = NULL)]
# In fact, nothing is going to work for an internally consistant framework because
tab_1 <- test_points[m == 10 & py1 == .25 & py2 == 1, c("py1", "py2", "id", "cv")]
tab_2 <- test_points[m == 10 & py1 == 1 & py2 == .25, c("py1", "py2", "id", "cv")]
tab_1[, cv := round(cv, 2)]
tab_2[, cv := round(cv, 2)]
tab_1
tab_2
# or similarily
ab <- test_points[id == "a" & m == 10 & py1 == .25 & py2 == .5, cv]
ac <- test_points[id == "a" & m == 10 & py1 == .25 & py2 == 1, cv]
bc <- test_points[id == "a" & m == 10 & py1 == .5 & py2 == 1, cv]
# these are not equal
ac-ab
bc
# check
test_points[m == 10 & ((py1 == .25 & py2 == 1)| (py1 == 1 & py2 == .25))]
# what about for a small change?
test_points[m == 10 & ((py1 == .99 & py2 == 1)| (py1 == 1 & py2 == .99))]
value_vars <- setdiff(colnames(test_points), c( "px", "py1", "py2", "id", "m"))
test_points_w1 <- dcast.data.table(test_points, px + py1 + py2 + m ~ id, value.var = value_vars)
test_points_w1[,  u_ch_ratio := (u1_a - u2_a)/(u1_b - u2_b)]
test_points_w1[, cv_ratio := cv_a/cv_b]
test_points_w1[m == 10 & ((py1 == .25 & py2 == 1)| (py1 == 1 & py2 == .25))]
# get rectangle portion
test_points[, rectangle := pmin(y1, y2) *abs(py1 - py2), by =  ]
# over this coding issue so just gonna wright a loop
for( i in 1:nrow(test_points)){
traingle_vals <- test_points[i , integrate(p_y_m, y1, y2, m = m, alpha = alpha)]
test_points[i , triangle := abs(traingle_vals$value)]
}
test_points[, cs := rectangle + triangle]
# delete extra stuff
col_to_del <- c("rectangle", "triangle")
test_points[, (col_to_del) := NULL]
# make it wide
value_vars <- setdiff(colnames(test_points), c( "px", "py1", "py2", "id", "m"))
test_points_w <- dcast.data.table(test_points, px + py1 + py2 + m ~ id, value.var = value_vars)
# check example points
test_points[m == 10 & ((py1 == .25 & py2 == 1)| (py1 == 1 & py2 == .25))]
test_points_w[m == 10 & ((py1 == .25 & py2 == 1)| (py1 == 1 & py2 == .25))]
test_points_w[m == 10 & ((py1 == .25 & py2 == 1)| (py1 == 1 & py2 == .25))]
test_points_w[m == 10 & ((py1 == .25 & py2 == 1)| (py1 == 1 & py2 == .25)), cs_a/cs_b]
test_points_w[m == 10 & ((py1 == .25 & py2 == 1)| (py1 == 1 & py2 == .25)), (u1_a-u2_a)/( u1_b- u2_b)]
test_points_w[m == 10 & ((py1 == .25 & py2 == 1)| (py1 == 1 & py2 == .25)), (cv_a)/(  cv_b)]
test_points_w[m == 10 & ((py1 == .25 & py2 == 2)| (py1 == 2 & py2 == .25))]
test_points_w[m == 10 & ((py1 == .25 & py2 == 2)| (py1 == 2 & py2 == .25)), cs_a/cs_b]
test_points_w[m == 10 & ((py1 == .25 & py2 == 2)| (py1 == 2 & py2 == .25)), (u1_a-u2_a)/( u1_b- u2_b)]
test_points_w[m == 10 & ((py1 == .25 & py2 == 2)| (py1 == 2 & py2 == .25)), (cv_a)/(  cv_b)]
#  transform utility for a certain intuition.
# here utility cange is the same regardless of income for a price change
test_points[, t_u1 := log(u1)]
test_points[, t_u2 := log(u2)]
test_points[, t_u_d := t_u2 - t_u1]
test_points[, u_d := u2 - u1]
test_points[id == "b" & ((py1 == .25 & py2 == 1))]
test_points[id == "a" & ((py1 == .25 & py2 == 1))]
test_points[id == "b" & ((py1 == .25 & py2 == 1)), round(cs/abs(t_u_d), 2) ]
setorder(test_points, py1, py2, id, m)
# notice that the ratio of CS to utility stays constant. SO we can derive a theta function of income
# that gives us welfare per dollar for both individuals
test_points[id == "a" & ((py1 == .25 & py2 == 1)),  round(cs/abs(t_u_d), 2)]
test_points[, theta_y := cs/abs(t_u_d) ]
test_points[, theta_y :=  theta_y/theta_y[1], by = c("id", "py1", "py2")]
setorder(test_points, theta_y, py1)
test_points[id == "a" & ((py1 == .25 & py2 == 1)), ]
test_points[id == "b" & ((py1 == .25 & py2 == 1)),  ]
demand_points <- data.table(expand.grid(id = c("a", "b"),
m = c(10,20, 30),
x = 1,
y1 = c(1,2),
y2 = c(2,3)))
test_points
test_points[id == "a" & ((py1 == .25 & py2 == 1)), ]
test_points[id == "b" & ((py1 == .25 & py2 == 1)),  ]
# set up two cosumers
#Consumer a
alpha_a <- (3/4)
ma <- 10
# consumer b
alpha_b <- (1/4)
mb <- 10
# price changes
px1 <- 1
py1 <- 1
px2 <- 2
py2 <- 1
# what happens to each consumers utiltiy?
# consumer a change
util_ch_a <- ind_util_f(ma,px1,py1, alpha_a) - ind_util_f(ma,px2,py2, alpha_a)
util_ch_a
util_ch_b <- ind_util_f(mb,px1,py1, alpha_b) - ind_util_f(ma,px2,py2, alpha_b)
util_ch_b
# what happens to their CV ?
cv_a <- exp_f(u = ind_util_f(ma,px1,py1, alpha_a), px2, py2, alpha_a) - ma
cv_a
cv_b <-   exp_f(u = ind_util_f(mb,px1,py1, alpha_b), px2, py2, alpha_b) - mb
cv_b
# try to recover utiltiy change
mu_income_f(ma, px2, py2, alpha_a)* cv_a
util_ch_a
mu_income_f(mb, px2, py2, alpha_b)* cv_b
util_ch_b
util_ch_a
util_ch_b
#========================================#
# ==== Examples of EV and CV failure ====
#========================================#
# consumer b
alpha_a <- (3/4)
# consumer b
alpha_b <- (1/4)
# lets get four utility levels by changing the price of one good only. Note, this makes
# the other good like a numeraire good. then I can get a sense of the properties here
test_points <- data.table(expand.grid(id = c("a", "b"),
m = c(10,20,30),
px = 1,
py1= c(.25,.5, .99,1,2,4),
py2 = c(.25,.5, .99,1,2,4)))
# get rid of zero change price pairs
test_points <- test_points[py1 != py2]
# add alhpas
test_points[id == "a", alpha := alpha_a ]
test_points[id == "b", alpha := alpha_b ]
test_points
# lets get four utility levels by changing the price of one good only. Note, this makes
# the other good like a numeraire good. then I can get a sense of the properties here
test_points <- data.table(expand.grid(id = c("a", "b"),
m = c(10,20,30),
px = 1,
py1= c(.25,.5, .99,1,2,4),
py2 = c(.25,.5, .99,1,2,4)))
# get rid of zero change price pairs
test_points <- test_points[py1 != py2]
test_points
# add alhpas
test_points[id == "a", alpha := alpha_a ]
test_points[id == "b", alpha := alpha_b ]
test_points
# set column order
setcolorder(test_points, c("id", "alpha", "m"))
# fill out their demand
test_points[, x := x_m(m, px, alpha)]
test_points[, y1 := y_m(m, py1, alpha)]
test_points[, y2 := y_m(m, py2, alpha)]
#get thier indirect utility at each st of prices
test_points[, u1 := ind_util_f(m,px,py1, alpha)]
test_points[, u2 := ind_util_f(m,px,py2, alpha)]
# Now lets get thier compensated variation at each change
test_points[, cv := exp_f(u = u1, px, py2, alpha) - m]
# lets also get equivalent variation
test_points[, ev := m - exp_f(u = u2, px, py1, alpha)]
# what is their marginal utility of income portion of the CV?
test_points[, mui_2 := mu_income_f(m, px, py2, alpha)]
test_points
# check that I can get CV in the same way
all(test_points[, cv - (u1-u2)/mui_2< .000001])
# So now we will try to get a transformed utility function that has the cardinality
# of CV, but preserves the ordinality of Utility (call it transformed utility tu)
test_points[, tu1 := u1/mui_2]
test_points
test_points[, tu2 := u2/mui_2]
test_points
m
y_m
# try it with loged indirect utiltiy
ind_util_f2 <- function(m, px, py, alpha){
beta <- (1-alpha)
log(alpha^alpha*beta^beta*px^(-alpha)*py^(-beta)) + log(m)
}
ind_util_f2
test_points
#========================================#
# ==== cobb douglass welfare example ====
#========================================#
rm(list = ls(pos = ".GlobalEnv"), pos = ".GlobalEnv")
options(scipen = 999)
cat("\f")
library(data.table)
#====================#
# ==== functions ====
#====================#
# generic utility
util_f <- function(x, y, alpha){
beta <- (1-alpha)
x^alpha * y ^beta
}
# generic marshalian demand
x_m <- function(m, px, alpha){
alpha*(m/px)
}
y_m <- function(m, py, alpha){
beta <- (1-alpha)
beta*(m/py)
}
# inverse marshaalian demand
p_x_m <- function( x, m, alpha){
alpha * (m/x)
}
p_y_m <- function( y,m, alpha){
beta <- (1-alpha)
beta*(m/y)
}
# inderect utility
ind_util_f <- function(m, px, py, alpha){
beta <- (1-alpha)
x_m( m, px, alpha)^alpha * y_m(m, py, alpha)^beta
}
# hicksian demands
x_h <- function(u, py, px, alpha){
beta <- (1-alpha)
u*((alpha/beta)*(py/px))^beta
}
y_h <- function(u, py, px, alpha){
beta <- (1-alpha)
u*((beta/alpha)*(px/py))^alpha
}
# expenditure function
exp_f <- function(u, px, py, alpha){
beta <- (1-alpha)
u*(  px^alpha*((alpha/beta)*py)^beta + py^beta*((beta/alpha)*px)^alpha)
}
#marginal utiltiy of income
mu_income_f <- function(m, px, py, alpha){
beta <- (1-alpha)
first  <- (alpha*(m/px))^alpha * beta * (beta*(m/py))^(beta -1 ) * (beta/py)
second <- (beta*(m/py))^beta * alpha *  (alpha*(m/px))^(alpha-1) * (alpha/px)
first + second
}
#===========================================#
# ==== try transformed set of funcitons ====
#===========================================#
# generic utility
util_f <- function(x, y, alpha){
beta <- (1-alpha)
alpha*log(x) + beta*log(y)
}
# generic marshalian demand
x_m <- function(m, px, alpha){
alpha*(m/px)
}
y_m <- function(m, py, alpha){
beta <- (1-alpha)
beta*(m/py)
}
# inverse marshaalian demand
p_x_m <- function( x, m, alpha){
alpha * (m/x)
}
p_y_m <- function( y,m, alpha){
beta <- (1-alpha)
beta*(m/y)
}
# try it with loged indirect utiltiy
ind_util_f <- function(m, px, py, alpha){
beta <- (1-alpha)
log(alpha^alpha*beta^beta*px^(-alpha)*py^(-beta)) + log(m)
}
# # hicksian demands
# x_h <- function(u, py, px, alpha){
#   beta <- (1-alpha)
#   u*((alpha/beta)*(py/px))^beta
# }
#
# y_h <- function(u, py, px, alpha){
#   beta <- (1-alpha)
#   u*((beta/alpha)*(px/py))^alpha
# }
#
# expenditure function
exp_f <- function(u, px, py, alpha){
beta <- (1-alpha)
exp(u-log(alpha^alpha*beta^beta*px^(-alpha)*py^(-beta)) )
}
#marginal utiltiy of income
mu_income_f <- function(m, px, py, alpha){
1/w
}
# set up two cosumers
#Consumer a
alpha_a <- (3/4)
ma <- 10
# consumer b
alpha_b <- (1/4)
mb <- 10
# price changes
px1 <- 1
py1 <- 1
px2 <- 2
py2 <- 1
# what happens to each consumers utiltiy?
# consumer a change
util_ch_a <- ind_util_f(ma,px1,py1, alpha_a) - ind_util_f(ma,px2,py2, alpha_a)
util_ch_a
util_ch_b <- ind_util_f(mb,px1,py1, alpha_b) - ind_util_f(ma,px2,py2, alpha_b)
util_ch_b
# what happens to their CV ?
cv_a <- exp_f(u = ind_util_f(ma,px1,py1, alpha_a), px2, py2, alpha_a) - ma
cv_a
cv_b <-   exp_f(u = ind_util_f(mb,px1,py1, alpha_b), px2, py2, alpha_b) - mb
cv_b
# try to recover utiltiy change
mu_income_f(ma, px2, py2, alpha_a)* cv_a
util_ch_a
# try to recover utiltiy change
mu_income_f(ma, px2, py2, alpha_a)* cv_a
#marginal utiltiy of income
mu_income_f <- function(m, px, py, alpha){
1/m
}
# try to recover utiltiy change
mu_income_f(ma, px2, py2, alpha_a)* cv_a
util_ch_a
mu_income_f(mb, px2, py2, alpha_b)* cv_b
util_ch_b
#========================================#
# ==== Examples of EV and CV failure ====
#========================================#
# consumer b
alpha_a <- (3/4)
# consumer b
alpha_b <- (1/4)
# lets get four utility levels by changing the price of one good only. Note, this makes
# the other good like a numeraire good. then I can get a sense of the properties here
test_points <- data.table(expand.grid(id = c("a", "b"),
m = c(10,20,30),
px = 1,
py1= c(.25,.5, .99,1,2,4),
py2 = c(.25,.5, .99,1,2,4)))
# get rid of zero change price pairs
test_points <- test_points[py1 != py2]
# add alhpas
test_points[id == "a", alpha := alpha_a ]
test_points[id == "b", alpha := alpha_b ]
# set column order
setcolorder(test_points, c("id", "alpha", "m"))
# fill out their demand
test_points[, x := x_m(m, px, alpha)]
test_points[, y1 := y_m(m, py1, alpha)]
test_points[, y2 := y_m(m, py2, alpha)]
#get thier indirect utility at each st of prices
test_points[, u1 := ind_util_f(m,px,py1, alpha)]
test_points[, u2 := ind_util_f(m,px,py2, alpha)]
# Now lets get thier compensated variation at each change
test_points[, cv := exp_f(u = u1, px, py2, alpha) - m]
# lets also get equivalent variation
test_points[, ev := m - exp_f(u = u2, px, py1, alpha)]
# what is their marginal utility of income portion of the CV?
test_points[, mui_2 := mu_income_f(m, px, py2, alpha)]
# check that I can get CV in the same way
all(test_points[, cv - (u1-u2)/mui_2< .000001])
test_points
mui_2
# So now we will try to get a transformed utility function that has the cardinality
# of CV, but preserves the ordinality of Utility (call it transformed utility tu)
test_points[, tu1 := u1/mui_2]
test_points[, tu2 := u2/mui_2]
test_points
